// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================================================================== //
// ====================== AUTHENTICATION MODELS ===================== //
// ================================================================== //

model User {
  id                String                    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String                    @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  role              String                    @default(value: "USER")
  is2FAenabled      Boolean                   @default(false)
  TwoFAconfirmation TwoFAConfirmation?
  accounts          Account[]
  products          Product[]
  connectedAccounts ConnectedGatewayAccount[]
  orders            Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorAuthenticationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFAConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// ================================================================== //
// ======================== PRODUCT MODELS ========================== //
// ================================================================== //

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  quantity    Int
  image       String?
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
}

// ================================================================== //
// ===================== PAYMENT GATEWAY MODELS ===================== //
// ================================================================== //

model ConnectedGatewayAccount {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  identifier  String  @unique
  platform    String
  countryCode String
  isActive    Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ================================================================== //
// ======================== ORDER MODELS ============================ //
// ================================================================== //

model Order {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  identifier String  @unique
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
